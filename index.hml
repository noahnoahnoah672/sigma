<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Noah's Casino</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <header>
    <h1>Welcome to Noah's Casino</h1>
    <nav>
      <ul>
        <li><a href="#blackjack">Blackjack</a></li>
        <li><a href="#plinko">Plinko</a></li>
      </ul>
    </nav>
  </header>

  <main>
    <section id="blackjack">
      <h2>Blackjack Game</h2>
      <button onclick="startBlackjack()">Start Game</button>
      <div id="blackjackGame">
        <p><strong>Your Hand:</strong> <span id="playerHand"></span></p>
        <p><strong>Dealer's Hand:</strong> <span id="dealerHand"></span></p>
        <button onclick="hit()">Hit</button>
        <button onclick="stand()">Stand</button>
        <p><strong>Winner:</strong> <span id="winner"></span></p>
      </div>
    </section>

    <section id="plinko">
      <h2>Plinko Game</h2>
      <button onclick="dropBall()">Drop Ball</button>
      <canvas id="plinkoBoard" width="500" height="500"></canvas>
      <p><strong>Ball Landing Position:</strong> <span id="plinkoResult"></span></p>
    </section>
  </main>

  <footer>
    <p>&copy; 2025 Noah's Casino</p>
  </footer>

  <script src="app.js"></script>
</body>
</html>
// Basic Blackjack game setup
let deck = [];
const suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'];
const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];

function createDeck() {
  deck = [];
  for (let suit of suits) {
    for (let value of values) {
      deck.push({ value: value, suit: suit });
    }
  }
  deck = shuffle(deck);
}

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

function dealCard() {
  return deck.pop();
}

function startBlackjack() {
  createDeck();
  const playerHand = [dealCard(), dealCard()];
  const dealerHand = [dealCard(), dealCard()];

  document.getElementById("playerHand").textContent = displayHand(playerHand);
  document.getElementById("dealerHand").textContent = displayHand(dealerHand);
  
  // Saving the hands globally for future moves
  window.playerHand = playerHand;
  window.dealerHand = dealerHand;
}

function displayHand(hand) {
  return hand.map(card => `${card.value} of ${card.suit}`).join(', ');
}

function hit() {
  const card = dealCard();
  window.playerHand.push(card);
  document.getElementById("playerHand").textContent = displayHand(window.playerHand);
  checkWinner();
}

function stand() {
  while (calculateHand(window.dealerHand) < 17) {
    window.dealerHand.push(dealCard());
  }
  document.getElementById("dealerHand").textContent = displayHand(window.dealerHand);
  checkWinner();
}

function calculateHand(hand) {
  let total = 0;
  let aceCount = 0;

  for (let card of hand) {
    if (card.value === 'A') {
      aceCount++;
      total += 11;
    } else if (['K', 'Q', 'J'].includes(card.value)) {
      total += 10;
    } else {
      total += parseInt(card.value);
    }
  }

  // Adjust for aces if total exceeds 21
  while (total > 21 && aceCount > 0) {
    total -= 10;
    aceCount--;
  }

  return total;
}

function checkWinner() {
  const playerTotal = calculateHand(window.playerHand);
  const dealerTotal = calculateHand(window.dealerHand);
  
  let winnerText = '';
  if (playerTotal > 21) {
    winnerText = "You bust! Dealer wins.";
  } else if (dealerTotal > 21) {
    winnerText = "Dealer busts! You win!";
  } else if (playerTotal > dealerTotal) {
    winnerText = "You win!";
  } else if (dealerTotal > playerTotal) {
    winnerText = "Dealer wins!";
  } else {
    winnerText = "It's a tie!";
  }

  document.getElementById("winner").textContent = winnerText;
}
// Simple Plinko game using canvas
const canvas = document.getElementById("plinkoBoard");
const ctx = canvas.getContext("2d");

const numRows = 5;
const numCols = 9;
const ballSize = 15;
const pegSize = 10;
const ballSpeed = 5;

let ball = { x: canvas.width / 2, y: 0, dx: 0, dy: ballSpeed };

function createPlinkoBoard() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawPeaks();
}

function drawPeaks() {
  ctx.fillStyle = "#fff";
  for (let row = 0; row < numRows; row++) {
    for (let col = 0; col < numCols; col++) {
      const x = col * (canvas.width / numCols) + (canvas.width / numCols) / 2;
      const y = row * (canvas.height / numRows) + (canvas.height / numRows) / 2;
      ctx.beginPath();
      ctx.arc(x, y, pegSize, 0, Math.PI * 2);
      ctx.fill();
    }
  }
}

function dropBall() {
  ball.y = 0;
  ball.x = canvas.width / 2;
  ball.dy = ballSpeed;
  let interval = setInterval(function () {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawPeaks();

    ball.y += ball.dy;

    // Simulate bouncing off pegs
    if (ball.y > canvas.height) {
      clearInterval(interval);
      document.getElementById("plinkoResult").textContent = Math.floor(Math.random() * 10) + 1; // Random result for demo
    }
    ctx.beginPath();
    ctx.arc(ball.x, ball.y, ballSize, 0, Math.PI * 2);
    ctx.fill();
  }, 20);
}

createPlinkoBoard();

